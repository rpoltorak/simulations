{"version":3,"sources":["ProjectileMotion.js","useInterval.js","GameOfLife.js","App.js","index.js"],"names":["getRandomColor","colors","Math","floor","random","length","ProjectileMotion","props","getUpdatedParams","params","alpha","m","v","frictionEnabled","alphaRadians","PI","c","model","Object","assign","state","x","y","vx","cos","vy","sin","r","changeInput","value","field","setState","update","projectile","trajectoryGraph","prepareUpdate","updateRenderer","animation","window","requestAnimationFrame","stop","updateX","dt","xValues","simId","values","updateY","g","yValues","start","board","component","create","name","withLabel","fixed","size","color","strokeColor","updateDataArray","this","dataX","dataY","cancelAnimationFrame","reset","currentBoard","JSXGraph","freeBoard","initBoard","boundingbox","axis","showNavigation","showCopyright","className","id","type","onChange","event","Number","target","disabled","checked","Boolean","onClick","style","width","height","Component","useInterval","callback","delay","intervalRef","useRef","callbackRef","useEffect","current","setInterval","clearInterval","DEFAULT_RULES","overpopulation","underpopulation","rebirth","GameOfLife","useState","boardSize","setBoardSize","setModel","cells","setCells","isRunning","setIsRunning","frequency","setFrequency","rules","setRules","createModel","createCells","push","isFilled","changeRules","rule","defaultState","updatedModel","map","aliveState","neighbours","amount","calculateNeighbours","onSubmit","preventDefault","textAlign","gridTemplateColumns","key","slice","console","log","JSON","stringify","toggleCell","backgroundColor","App","basename","to","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9c7c81a0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { JSXGraph } from \"jsxgraph\";\n\nconst getRandomColor = () => {\n  const colors = [\n    \"blue\",\n    \"green\",\n    \"violet\",\n    \"turquoise\",\n    \"orange\",\n    \"olive\",\n    \"coral\",\n    \"cyan\"\n  ];\n  const randomIndex = Math.floor(Math.random() * colors.length);\n\n  return colors[randomIndex];\n};\n\nexport default class ProjectileMotion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      simId: 0,\n      board: null,\n      trajectoryGraph: null,\n      projectile: null,\n      model: {\n        x: 0,\n        y: 0,\n        vx: 0,\n        vy: 0\n      },\n      params: {\n        v: 50,\n        alpha: 60,\n        alphaRadians: null,\n        m: 2,\n        c: 0.7,\n        dt: 0.01,\n        g: 9.81,\n        frictionEnabled: true\n      },\n      xValues: {},\n      yValues: {}\n    };\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n\n  getUpdatedParams = params => {\n    const { alpha, m, v, frictionEnabled } = params;\n    const alphaRadians = (Math.PI * alpha) / 180;\n    const c = frictionEnabled ? params.c : 0;\n\n    return {\n      model: Object.assign({}, this.state.model, {\n        x: 0,\n        y: 0,\n        vx: v * Math.cos(alphaRadians),\n        vy: v * Math.sin(alphaRadians)\n      }),\n      params: Object.assign({}, params, {\n        alphaRadians,\n        r: c / m\n      })\n    };\n  };\n\n  changeInput = (value, field) => {\n    this.setState(() => {\n      const params = Object.assign({}, this.state.params, {\n        [field]: value\n      });\n\n      return this.getUpdatedParams(params);\n    });\n  };\n\n  update = () => {\n    const { model, projectile, trajectoryGraph } = this.state;\n\n    if (model.y > 0) {\n      projectile\n        .prepareUpdate()\n        .update()\n        .updateRenderer();\n\n      trajectoryGraph\n        .prepareUpdate()\n        .update()\n        .updateRenderer();\n\n      this.setState(() => ({\n        animation: window.requestAnimationFrame(this.update)\n      }));\n    } else {\n      this.stop();\n    }\n  };\n\n  updateX = () => {\n    const {\n      model,\n      params: { dt, r }\n    } = this.state;\n\n    const vx = model.vx - r * model.vx * dt;\n    const x = model.x + vx * dt - 0.5 * r * vx * dt * dt;\n\n    this.setState(({ model, xValues, simId }) => {\n      const values = xValues[simId] ? xValues[simId] : [];\n\n      return {\n        model: Object.assign({}, model, { x, vx }),\n        xValues: Object.assign({}, xValues, {\n          [simId]: [...values, x]\n        })\n      };\n    });\n\n    return x;\n  };\n\n  updateY = () => {\n    const {\n      model,\n      params: { g, dt, r }\n    } = this.state;\n\n    const vy = model.vy - g * dt - r * model.vy * dt;\n    const y = model.y + vy * dt - 0.5 * g * dt * dt + 0.5 * r * vy * dt * dt;\n\n    this.setState(({ model, yValues, simId }) => {\n      const values = yValues[simId] ? yValues[simId] : [];\n\n      return {\n        model: Object.assign({}, model, { y, vy }),\n        yValues: Object.assign({}, yValues, {\n          [simId]: [...values, y]\n        })\n      };\n    });\n\n    return y;\n  };\n\n  start = () => {\n    const { board, simId } = this.state;\n    const component = this;\n\n    const projectile = board.create(\"point\", [this.updateX, this.updateY], {\n      name: \"projectile\",\n      withLabel: false,\n      fixed: true,\n      size: 4,\n      color: \"red\"\n    });\n\n    const trajectoryGraph = board.create(\"curve\", [[0], [0]], {\n      name: simId,\n      strokeColor: getRandomColor()\n    });\n\n    trajectoryGraph.updateDataArray = function() {\n      this.dataX = component.state.xValues[this.name];\n      this.dataY = component.state.yValues[this.name];\n    };\n\n    this.setState(() => ({\n      projectile,\n      trajectoryGraph,\n      animation: window.requestAnimationFrame(this.update)\n    }));\n  };\n\n  stop = () => {\n    const { animation, simId } = this.state;\n\n    if (animation) {\n      window.cancelAnimationFrame(animation);\n    }\n\n    this.setState(({ params }) => ({\n      simId: simId + 1,\n      animation: null,\n      ...this.getUpdatedParams(params)\n    }));\n  };\n\n  reset = () => {\n    const { animation, board: currentBoard } = this.state;\n\n    if (animation) {\n      window.cancelAnimationFrame(animation);\n    }\n\n    if (currentBoard) {\n      JSXGraph.freeBoard(currentBoard);\n    }\n\n    const board = JSXGraph.initBoard(\"simulation\", {\n      boundingbox: [-10, 100, 300, -10],\n      axis: true,\n      showNavigation: false,\n      showCopyright: false\n    });\n\n    this.setState(({ params }) => ({\n      board,\n      xValues: {},\n      yValues: {},\n      animation: null,\n      ...this.getUpdatedParams(params)\n    }));\n  };\n\n  render() {\n    const { animation, params } = this.state;\n\n    return (\n      <div className=\"sim\">\n        <div>\n          <h1>Rzut ukośny</h1>\n          <form id=\"sim-form\">\n            <div className=\"sim-row\">\n              <label>kąt (alfa)</label>\n              <input\n                className=\"text-input\"\n                type=\"number\"\n                value={params.alpha}\n                onChange={event =>\n                  this.changeInput(Number(event.target.value), \"alpha\")\n                }\n                disabled={animation}\n              />\n            </div>\n            <div className=\"sim-row\">\n              <label>prędkość (v)</label>\n              <input\n                className=\"text-input\"\n                type=\"number\"\n                value={params.v}\n                onChange={event =>\n                  this.changeInput(Number(event.target.value), \"v\")\n                }\n                disabled={animation}\n              />\n            </div>\n            <div className=\"sim-row\">\n              <label>masa (m)</label>\n              <input\n                className=\"text-input\"\n                type=\"number\"\n                value={params.m}\n                onChange={event =>\n                  this.changeInput(Number(event.target.value), \"m\")\n                }\n                disabled={animation}\n              />\n            </div>\n            <div className=\"sim-row\">\n              <label>dt</label>\n              <input\n                className=\"text-input\"\n                type=\"number\"\n                value={params.dt}\n                onChange={event =>\n                  this.changeInput(Number(event.target.value), \"dt\")\n                }\n                disabled={animation}\n              />\n            </div>\n            <div className=\"sim-row\">\n              <label>przysp. graw. (g)</label>\n              <input\n                className=\"text-input\"\n                type=\"number\"\n                value={params.g}\n                onChange={event =>\n                  this.changeInput(Number(event.target.value), \"g\")\n                }\n                disabled={animation}\n              />\n            </div>\n            <div className=\"sim-row\">\n              <label>uwzględnij opór</label>\n              <input\n                className=\"checkbox-input\"\n                type=\"checkbox\"\n                checked={params.frictionEnabled}\n                onChange={event =>\n                  this.changeInput(\n                    Boolean(event.target.checked),\n                    \"frictionEnabled\"\n                  )\n                }\n                disabled={animation}\n              />\n            </div>\n            <div className=\"sim-row\">\n              <label>współczynnik oporu</label>\n              <input\n                className=\"text-input\"\n                type=\"number\"\n                value={params.c}\n                onChange={event =>\n                  this.changeInput(Number(event.target.value), \"c\")\n                }\n                disabled={animation || !params.frictionEnabled}\n              />\n            </div>\n          </form>\n          <div className=\"sim-buttons\">\n            <button\n              className=\"button\"\n              onClick={this.start}\n              disabled={animation}\n            >\n              Start\n            </button>\n            <button\n              className=\"button\"\n              onClick={this.reset}\n              disabled={animation}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n\n        <div id=\"simulation\" style={{ width: \"500px\", height: \"500px\" }}></div>\n      </div>\n    );\n  }\n}\n","import { useRef, useEffect } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const intervalRef = useRef();\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (typeof delay === \"number\") {\n      intervalRef.current = window.setInterval(\n        () => callbackRef.current(),\n        delay\n      );\n\n      return () => window.clearInterval(intervalRef.current);\n    }\n  }, [delay]);\n\n  return intervalRef;\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./GameOfLife.css\";\nimport useInterval from \"./useInterval\";\nimport defaultState from \"./defaultState.json\";\n\nconst CELL_SIZE = 20;\nconst BOARD_SIZE = 25;\nconst FREQUENCY = 1;\nconst DEFAULT_RULES = {\n  overpopulation: 3,\n  underpopulation: 1,\n  rebirth: 2\n};\n\nfunction GameOfLife() {\n  const [boardSize, setBoardSize] = useState(BOARD_SIZE);\n  const [model, setModel] = useState([]);\n  const [cells, setCells] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [frequency, setFrequency] = useState(FREQUENCY);\n  const [rules, setRules] = useState(DEFAULT_RULES);\n\n  const createModel = () => {\n    let model = [];\n\n    for (let y = 0; y < boardSize; y++) {\n      model[y] = [];\n      for (let x = 0; x < boardSize; x++) {\n        model[y][x] = false;\n      }\n    }\n\n    return model;\n  };\n\n  const createCells = () => {\n    let cells = [];\n\n    for (let x = 0; x < boardSize; x++) {\n      for (let y = 0; y < boardSize; y++) {\n        cells.push({ x, y });\n      }\n    }\n\n    return cells;\n  };\n\n  const toggleCell = (x, y) => {\n    if (isRunning) {\n      return;\n    }\n\n    const updatedModel = [\n      ...model.slice(0, x),\n      [...model[x].slice(0, y), !model[x][y], ...model[x].slice(y + 1)],\n      ...model.slice(x + 1)\n    ];\n\n    setModel(updatedModel);\n\n    console.log(JSON.stringify(model));\n  };\n\n  const isFilled = (x, y) => {\n    return model[x] && model[x][y];\n  };\n\n  const calculateNeighbours = (x, y) => {\n    let amount = 0;\n\n    if (isFilled(x - 1, y - 1)) amount++;\n    if (isFilled(x, y - 1)) amount++;\n    if (isFilled(x + 1, y - 1)) amount++;\n    if (isFilled(x - 1, y)) amount++;\n    if (isFilled(x + 1, y)) amount++;\n    if (isFilled(x - 1, y + 1)) amount++;\n    if (isFilled(x, y + 1)) amount++;\n    if (isFilled(x + 1, y + 1)) amount++;\n\n    return amount;\n  };\n\n  const runIteration = () => {\n    const updatedModel = model.map((cells, x) =>\n      cells.map((aliveState, y) => {\n        const { overpopulation, underpopulation, rebirth } = rules;\n        const neighbours = calculateNeighbours(x, y);\n\n        if (!aliveState && neighbours === rebirth) {\n          return true;\n        } else if (\n          neighbours > overpopulation ||\n          neighbours < underpopulation\n        ) {\n          return false;\n        }\n\n        return aliveState;\n      })\n    );\n\n    setModel(updatedModel);\n  };\n\n  const start = () => {\n    setIsRunning(true);\n  };\n\n  const stop = () => {\n    setIsRunning(false);\n\n    clearInterval(intervalRef.current);\n  };\n\n  const clear = () => {\n    setIsRunning(false);\n    setModel(createModel());\n    setCells(createCells());\n  };\n\n  const reset = () => {\n    setIsRunning(false);\n    setBoardSize(BOARD_SIZE);\n    setFrequency(FREQUENCY);\n    setRules(DEFAULT_RULES);\n    setModel(defaultState);\n    setCells(createCells());\n  };\n\n  const changeRules = rule => {\n    setRules(Object.assign({}, rules, rule));\n  };\n\n  useEffect(() => {\n    setIsRunning(false);\n    setModel(createModel());\n    setCells(createCells());\n  }, [boardSize]);\n\n  useEffect(() => {\n    setModel(defaultState);\n    setCells(createCells());\n  }, []);\n\n  const intervalRef = useInterval(\n    runIteration,\n    isRunning ? frequency * 1000 : null\n  );\n\n  return (\n    <div className=\"sim\">\n      <div>\n        <h1>Gra w życie</h1>\n        <ul>\n          <li>\n            Komórka przy zbyt wysokiej populacji sąsiadów <br />\n            większej od X umiera z przeludnienia\n          </li>\n          <li>\n            Komórka przy zbyt niskiej populacji sąsiadów <br />\n            mniejszej od Y umiera z osamotnienia\n          </li>\n          <li>\n            Komórka posiadająca dokładnie Z żywych sąsiadów <br /> ożywa\n          </li>\n        </ul>\n        <p>\n          Możesz rysować dowolne kombinacje osobników\n          <br /> klikając na poszczególne kwadraty siatki oraz\n          <br /> zmieniać reguły po zatrzymaniu iteracji\n        </p>\n        <form id=\"sim-form\" onSubmit={event => event.preventDefault()}>\n          <div className=\"sim-row\">\n            <label>rozmiar</label>\n            <input\n              className=\"text-input\"\n              type=\"number\"\n              value={boardSize}\n              onChange={event => setBoardSize(Number(event.target.value))}\n              disabled={isRunning}\n            />\n          </div>\n          <div className=\"sim-row\">\n            <label>częstość iteracji (sek)</label>\n            <input\n              className=\"text-input\"\n              type=\"number\"\n              value={frequency}\n              onChange={event => setFrequency(Number(event.target.value))}\n              disabled={isRunning}\n            />\n          </div>\n          <div className=\"sim-row\">\n            <label className=\"small\">\n              Śmierć przy zbyt wysokiej populacji sąsiadów większej od\n            </label>\n            <span className=\"value\">{rules.overpopulation}</span>\n            <button\n              className=\"button small\"\n              onClick={() =>\n                changeRules({ overpopulation: rules.overpopulation + 1 })\n              }\n              disabled={isRunning}\n            >\n              +\n            </button>\n            <button\n              className=\"button small\"\n              onClick={() =>\n                changeRules({ overpopulation: rules.overpopulation - 1 })\n              }\n              disabled={isRunning}\n            >\n              -\n            </button>\n          </div>\n          <div className=\"sim-row\">\n            <label className=\"small\">\n              Śmierć przy zbyt niskiej populacji sąsiadów mniejszej od\n            </label>\n            <span className=\"value\">{rules.underpopulation}</span>\n            <button\n              className=\"button small\"\n              onClick={() =>\n                changeRules({ underpopulation: rules.underpopulation + 1 })\n              }\n              disabled={isRunning}\n            >\n              +\n            </button>\n            <button\n              className=\"button small\"\n              onClick={() =>\n                changeRules({ underpopulation: rules.underpopulation - 1 })\n              }\n              disabled={isRunning}\n            >\n              -\n            </button>\n          </div>\n          <div className=\"sim-row\">\n            <label className=\"small\">\n              Odrodzenie przy populacji sąsiadów równej\n            </label>\n            <span className=\"value\">{rules.rebirth}</span>\n            <button\n              className=\"button small\"\n              onClick={() => changeRules({ rebirth: rules.rebirth + 1 })}\n              disabled={isRunning}\n            >\n              +\n            </button>\n            <button\n              className=\"button small\"\n              onClick={() => changeRules({ rebirth: rules.rebirth - 1 })}\n              disabled={isRunning}\n            >\n              -\n            </button>\n          </div>\n        </form>\n        <div className=\"sim-buttons\">\n          <button className=\"button\" onClick={start} disabled={isRunning}>\n            Start\n          </button>\n          <button className=\"button\" onClick={stop} disabled={!isRunning}>\n            Stop\n          </button>\n          <button className=\"button\" onClick={reset} disabled={isRunning}>\n            Default\n          </button>\n          <button className=\"button\" onClick={clear} disabled={isRunning}>\n            Clear\n          </button>\n        </div>\n        <p style={{ textAlign: \"left\" }}>\n          * Przycisk \"Default\" przywraca domyślne parametry <br />\n          ** Przycisk \"Clear\" czyści siatkę\n        </p>\n      </div>\n      <div\n        className=\"board\"\n        style={{\n          width: boardSize * CELL_SIZE,\n          height: boardSize * CELL_SIZE,\n          gridTemplateColumns: `repeat(${boardSize}, auto)`\n        }}\n      >\n        {cells.map(({ x, y }) => (\n          <div\n            className=\"cell\"\n            key={`${x},${y}`}\n            onClick={() => toggleCell(x, y)}\n            style={{ backgroundColor: model[x][y] ? \"black\" : \"lightgreen\" }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default GameOfLife;\n","import React from \"react\";\nimport {\n  Switch,\n  Route,\n  Link,\n  HashRouter as Router,\n  Redirect\n} from \"react-router-dom\";\n\nimport ProjectileMotion from \"./ProjectileMotion\";\nimport \"./App.css\";\nimport GameOfLife from \"./GameOfLife\";\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <nav>\n          <div>Wybierz:</div>\n          <ul>\n            <li>\n              <Link to=\"/projectile-motion\">Rzut ukośny</Link>\n            </li>\n            <li>\n              <Link to=\"/game-of-life\">Gra w życie</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => <Redirect to=\"/projectile-motion\" />}\n          />\n          <Route path=\"/projectile-motion\">\n            <ProjectileMotion />\n          </Route>\n          <Route path=\"/game-of-life\">\n            <GameOfLife />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}